package partials

import "github.com/rank1zen/yujin/internal/database"
import "fmt"
import "net/http"
import "github.com/go-chi/chi/v5"
import "github.com/rank1zen/yujin/internal/http/request"
import "github.com/rank1zen/yujin/internal/ddragon"

templ ProfileMatchCardSkeleton() {
	<li class="flex border-l-4">
		<div class="animate-pulse mr-2 ml-4 my-1">
			<div class="grid grid-flow-col grid-cols-[repeat(15,25px)] grid-rows-[repeat(2,25px)] gap-1">
				<div class="row-span-2 col-span-3 grid grid-cols-3 grid-rows-3 gap-2 pr-4">
					<div class="rounded-full bg-slate-200 col-span-3"></div>
					<div class="rounded-full bg-slate-200 col-span-2"></div>
					<div class="rounded-full bg-slate-200 col-span-3"></div>
				</div>
				<div class="row-span-2 col-span-2 bg-slate-200 rounded"></div>
				<div class="bg-slate-200 rounded"></div>
				<div class="bg-slate-200 rounded"></div>
				<div class="row-span-2 col-span-2 bg-slate-200 rounded"></div>
				<div class="row-span-2 col-span-4 grid grid-cols-3 grid-rows-3 gap-2 pr-4 ml-4">
					<div class="rounded-full bg-slate-200 col-span-3"></div>
					<div class="rounded-full bg-slate-200 col-span-2"></div>
					<div class="rounded-full bg-slate-200 col-span-3"></div>
				</div>
				<div class="bg-slate-200 rounded"></div>
				<div class="bg-slate-200 rounded"></div>
				<div class="bg-slate-200 rounded"></div>
				<div class="bg-slate-200 rounded"></div>
				<div class="bg-slate-200 rounded"></div>
				<div class="bg-slate-200 rounded"></div>
			</div>
		</div>
	</li>
}

templ ProfileMatchCard(m *database.ProfileMatch) {
	<li class="flex hover:brightness-90 bg-white hover:cursor-pointer border-l-4 border-red-500 rounded-l-sm rounded-r">
		<div class="my-1 overflow-hidden mr-2 ml-4">
			<div class="grid grid-flow-col grid-cols-[repeat(14,25px)] grid-rows-[repeat(2,25px)] gap-1">
				<div class="text-sm row-span-2 col-span-3 overflow-hidden align-middle leading-tight tracking-tight">
					<div class="font-bold block">+??? LP</div>
					<div class="block">{ m.GameDuration }</div>
					<div class="block">{ m.GameDate }</div>
				</div>
				<div class="col-span-2 row-span-2 overflow-hidden rounded shadow-xl">
					<img src={ m.ChampionIconUrl } class="scale-[1.1] size-full"/>
				</div>
				for i := range 2 {
					<div class="rounded overflow-hidden shadow">
						<img src={ ddragon.GetSummonerSpellUrl(m.SpellIds[i]) } class="size-full"/>
					</div>
				}
				<div class="grid col-span-2 row-span-2 overflow-hidden grid-cols-subgrid grid-rows-subgrid">
					<div class="col-start-1 row-start-1 col-span-2 row-span-2">
						<img src={ ddragon.GetRuneIconUrl(m.RunePrimaryId) } class="size-full"/>
					</div>
					<div class="col-start-2 row-start-2 z-10 p-1 bg-white rounded-tl-full overflow-hidden">
						<img src={ ddragon.GetRuneIconUrl(m.RuneSecondaryId) } class="size-full"/>
					</div>
				</div>
				<div class="text-sm row-span-2 col-span-3 overflow-hidden justify-between ml-2 leading-tight tracking-tight">
					<div class="font-bold block">{ m.Kills } / { m.Deaths } / { m.Assists }</div>
					<div class="block leading-tight">{ m.CreepScore } ({ m.CsPer10 })</div>
					<div class="block">{ m.Damage }</div>
				</div>
				<div class="grid row-span-2 col-span-3 grid-cols-subgrid grid-rows-subgrid">
					for i := range 6 {
						<div class="rounded overflow-hidden shadow">
							@itemIcon(m.ItemIds[i])
						</div>
					}
				</div>
			</div>
		</div>
	</li>
}

templ ProfileMatchListError() {
	<div class="">
		<div class="text-center">Error fetching matchlist.</div>
	</div>
}

templ ProfileMatchList(r *http.Request, m database.ProfileMatchList) {
	<ul class="flex flex-col gap-2">
		if len(m) == 0 {
			<div class="font-bold p-4">
				// TODO:
				No more matches
			</div>
		} else {
			for i := range len(m) {
				@ProfileMatchCard(m[i])
			}
			<div
				hx-get={ fmt.Sprintf("/profile/%s/matchlist?page=%d", chi.URLParam(r, "name"), request.QueryIntParam(r, "page", 0)+1) }
				hx-trigger="revealed"
				hx-swap="outerHTML"
			>
				Loading more
			</div>
		}
	</ul>
}

templ itemIcon(itemID int) {
	if itemID == 0 {
		<div class="bg-neutral-400 size-full"></div>
	} else {
		<div class="group flex">
			<img class="size-full" src={ ddragon.GetItemIconUrl(itemID) }/>
			<div class="group-hover:opacity-100 transition-opacity bg-red-400 absolute opacity-0">Tooltip?</div>
		</div>
	}
}
