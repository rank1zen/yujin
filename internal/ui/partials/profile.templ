package partials

import "fmt"
import "github.com/rank1zen/yujin/internal/database"
import "github.com/rank1zen/yujin/internal/ui/components"
import "github.com/rank1zen/yujin/internal/riot"

func genMatchListQuery(puuid riot.PUUID, page int) string {
	return fmt.Sprintf("/profile/%s/matchlist?page=%d", puuid, page)
}

func genLiveGameQuery(puuid riot.PUUID) string {
	return fmt.Sprintf("/profile/%s/livegame", puuid)
}

func genChampionStatsQuery(puuid riot.PUUID) string {
	return fmt.Sprintf("/profile/%s/matchlist", puuid)
}

templ ProfileMatchListSkeleton() {
	<div class="flex flex-col gap-y-3">
		for range 15 {
			<div class="bg-neutral-50 size-full animate-pulse"></div>
		}
	</div>
}

templ ProfileMatchList(m database.ProfileMatchList) {
	if m.Count == 0 {
		@components.TLast()
	} else {
		for i, n := range m.List {
			<tr
				if m.HasMore && i == 0 {
					hx-get={ genMatchListQuery(m.Puuid, m.Page+1) }
					hx-trigger="intersect once"
				}
			>
				@components.ChampionGrid(n.ChampionIcon, n.SummonersIcons, n.RunePrimaryIcon, n.RuneSecondaryIcon)
				@components.E(n.KillDeathAssist)
				@components.E(n.DamageDone, n.DamagePercentage)
				@components.E(n.GoldEarned, n.GoldPercentage)
				@components.E(n.VisionScore)
				@components.ItemsGrid(n.ItemIcons)
				@components.E(n.GameDuration)
				@components.E(n.GameDate)
			</tr>
		}
	}
}

templ ProfileMatchListPartial(puuid riot.PUUID) {
	<table class="text-left w-full">
		@components.THead("Champion", "KDA", "CS", "Damage", "Gold", "Vision", "Items", "End", "Date")
		<tbody
			hx-get={ genMatchListQuery(puuid, 0) }
			hx-trigger="revealed once"
			hx-swap-oob="beforeend:#table tbody"
		>
			@ProfileMatchListSkeleton()
		</tbody>
	</table>
}

templ ProfileMatchListError() {
	<div>Error fetching matchlist.</div>
}

templ ProfileLiveGameTeam(m database.ProfileLiveGameTeam) {
	@components.H3(m.Team, m.AverageRank)
	<table class="w-full text-left">
		@components.THead("Champion", "Summoner", "Ranke", "Win/Loss")
		<tbody>
			for _, n := range m.Participants {
				<tr>
					@components.ChampionGrid(n.ChampionIcon, n.SummonersIcons, n.RunePrimaryIcon, n.RuneSecondaryIcon)
					@components.E(n.Name)
					@components.E(n.Rank)
					@components.E(n.WinLoss, n.WinLoss)
				</tr>
			}
		</tbody>
	</table>
	<div>
		@components.BannedChampions(m.BannedChampionIcon)
	</div>
}

templ ProfileLiveGameSkeleton() {
	<div class="bg-neutral-50 size-full animate-pulse"></div>
}

templ ProfileLiveGame(m database.ProfileLiveGame) {
	<div>
		@ProfileLiveGameTeam(m.BlueTeam)
	</div>
	<div>
		@ProfileLiveGameTeam(m.RedTeam)
	</div>
}

templ ProfileLiveGamePartial(puuid riot.PUUID) {
	<div
		hx-get={ genLiveGameQuery(puuid) }
		hx-trigger="load"
	>
		@ProfileLiveGameSkeleton()
	</div>
}

templ ProfileLiveGameNotFoundError() {
	<div></div>
}

templ ProfileLiveGameError() {
	<div></div>
}

templ ProfileChampionStatListSkeleton() {
	<div>
		for range 15 {
			<div></div>
		}
	</div>
}

templ ProfileChampionStatList(m database.ProfileChampionStatList) {
	for _, n := range m.Stats {
		<tr>
			@components.Champion(n.ChampionIcon)
			@components.E(n.GamesPlayed)
			@components.E(n.WinLoss, n.WinRate)
			@components.E(n.LpDelta)
			@components.E(n.KillDeathAssist, n.KillParticipation)
			@components.E(n.CreepScore, n.CreepScorePer10)
			@components.E(n.DamageDone, n.DamagePercentage)
			@components.E(n.GoldEarned, n.GoldPercentage)
			@components.E(n.VisionScore)
		</tr>
	}
}

templ ProfileChampionStatListPartial(puuid riot.PUUID) {
	<table>
		@components.THead("Champion", "Games", "WinLoss", "LP", "KDA", "CS", "Damage", "Gold", "Vision")
		<tbody
			hx-get={ genChampionStatsQuery(puuid) }
			hx-trigger="revealed once"
		>
			@ProfileChampionStatListSkeleton()
		</tbody>
	</table>
}

templ ProfileChampionStatListError() {
	<div></div>
}
