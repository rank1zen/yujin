package partials

import "fmt"
import "github.com/rank1zen/yujin/internal/database"
import "github.com/rank1zen/yujin/internal/ui/components"
import "github.com/rank1zen/yujin/internal/riot"

func genMatchListQuery(puuid riot.PUUID, page int) string {
	return fmt.Sprintf("/profile/%s/matchlist?page=%d", puuid, page)
}

func genLiveGameQuery(puuid riot.PUUID) string {
	return fmt.Sprintf("/profile/%s/livegame", puuid)
}

func genChampionStatsQuery(puuid riot.PUUID) string {
	return fmt.Sprintf("/profile/%s/matchlist", puuid)
}

templ ProfileMatchListSkeleton() {
	<div class="flex flex-col gap-y-3">
		for range 15 {
			<div class="bg-neutral-50 size-full animate-pulse"></div>
		}
	</div>
}

templ ProfileMatchList(m database.ProfileMatchList) {
	for i, n := range m.List {
		<tr
			if m.HasMore && i == 0 {
				hx-get={ genMatchListQuery(m.Puuid, m.Page+1) }
				hx-trigger="intersect once"
			}
		>
			@components.ChampionGrid(n.Champion, n.Summoners, n.Runes)
			@components.E(components.FmtKDA(n.KdaKills, n.KdaDeaths, n.KdaAssists),
				components.Fmt(n.KdaParticipation))
			@components.E(components.FmtInt(n.CsRaw),
				components.Fmt(n.CsPer10))
			@components.E(components.FmtInt(n.DmgRaw),
				components.Fmt(n.DmgPercentageTeam))
			@components.E(components.FmtInt(n.GoldRaw),
				components.Fmt(n.GoldPercentageTeam))
			@components.E(components.FmtInt(n.VisRaw))
			@components.ItemsGrid(n.Items)
			@components.E(components.Fmt(n.GameDate.Day))
			,
			components.Fmt(n.GameDate))
		</tr>
	}
	if !m.HasMore {
		@components.TLast()
	}
}

templ ProfileMatchListPartial(puuid riot.PUUID) {
	<table class="text-left w-full">
		@components.THead("Champion", "KDA", "CS", "Damage", "Gold", "Vision", "Items", "Delta")
		<tbody
			hx-get={ genMatchListQuery(puuid, 0) }
			hx-trigger="revealed once"
			hx-swap-oob="beforeend:#table tbody"
		>
			@ProfileMatchListSkeleton()
		</tbody>
	</table>
}

templ ProfileMatchListError() {
	<div>Error fetching matchlist.</div>
}

templ ProfileLiveGameSkeleton() {
	<div class="bg-neutral-50 size-full animate-pulse"></div>
}

templ ProfileLiveGame(m database.ProfileLiveGame) {
	for _, n := range m.Participants {
		<tr>
			@components.ChampionGrid(n.Champion, n.Summoners, n.Runes)
			@components.E(components.FmtRiotName(n.RiotID, n.RiotTagLine),
				n.RankDivision,
				components.FmtWinLoss(n.RankWins, n.RankLosses))
			@components.BannedChampion(n.BannedChampion)
		</tr>
	}
}

templ ProfileLiveGamePartial(puuid riot.PUUID) {
	<table class="text-left w-full">
		@components.THead("Champion")
		<tbody
			hx-get={ genLiveGameQuery(puuid) }
			hx-trigger="revealed once"
			hx-swap-oob="beforeend:#table tbody"
		>
			@ProfileLiveGameSkeleton()
		</tbody>
	</table>
}

templ ProfileLiveGameNotFoundError() {
	<div></div>
}

templ ProfileLiveGameError() {
	<div></div>
}

templ ProfileChampionStatListSkeleton() {
	<div>
		for range 15 {
			<div></div>
		}
	</div>
}

templ ProfileChampionStatList(m database.ProfileChampionStatList) {
	for _, n := range m.List {
		<tr>
			@components.Champion(n.Champion)
			@components.E(n.GamesPlayed)
			@components.E(n.WinLoss, n.WinRate)
			@components.E(n.LpDelta)
			@components.E(components.FmtKDA(n.KdaKills, n.KdaDeaths, n.KdaAssists),
				components.Fmt(n.KdaParticipation))
			@components.E(components.FmtInt(n.CsRaw),
				components.Fmt(n.CsPer10))
			@components.E(components.FmtInt(n.DmgRaw),
				components.Fmt(n.DmgPercentageTeam))
			@components.E(components.FmtInt(n.GoldRaw),
				components.Fmt(n.GoldPercentageTeam))
			@components.E(components.FmtInt(n.VisRaw))
		</tr>
	}
}

templ ProfileChampionStatListPartial(puuid riot.PUUID) {
	<table class="text-left w-full">
		@components.THead("Champion", "Games", "WinLoss", "LP", "KDA", "CS", "Damage", "Gold", "Vision")
		<tbody
			hx-get={ genChampionStatsQuery(puuid) }
			hx-trigger="revealed once"
		>
			@ProfileChampionStatListSkeleton()
		</tbody>
	</table>
}

templ ProfileChampionStatListError() {
	<div></div>
}
