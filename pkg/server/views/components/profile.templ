package components

type MatchCardProps interface {
	Win() bool
	NetLP() string
	GameDate() string
	GameDuration() string

	ChampionIconUrl() string
	ChampionLevel() string
	Spell1IconUrl() string
	Spell2IconUrl() string

	PrimaryRune() string
	SecondaryRune() string

	KDA() string
	KDRatio() string
	CS() string

	Item() []string

	GamePatch() string
}

templ MatchCards(matches ...MatchCardProps) {
	<ul class="flex flex-col gap-2">
		for _, m := range matches {
			<li class="p-2 bg-red-50 rounded-lg">
				<div class="flex justify-around items-center gap-4">
					<div class="flex flex-col flex-none  flex-nowrap text-center justify-between">
						<p class="text-xl font-bold">{ m.NetLP() } </p>
						<p class="text-xs">{ m.GameDate() } </p>
						<p class="text-xs">{ m.GameDuration() } </p>
					</div>
					<div class="flex w-40 p-2 rounded-lg flex-none">
						<div class="grid grid-flow-col grid-cols-5 grid-rows-2 justify-start gap-0.5">
							<div class="col-span-2 row-span-2">
								<img src={ m.ChampionIconUrl() } class="size-full rounded-md object-cover"/>
							</div>
							<div class="">
								<img src={ m.Spell1IconUrl() } class="size-full rounded-sm object-cover"/>
							</div>
							<div class="">
								<img src={ m.Spell2IconUrl() } class="size-full rounded-sm object-cover"/>
							</div>
							<div class="col-span-2 row-span-2">
								<img src={ m.PrimaryRune() } class="size-full object-cover"/>
							</div>
						</div>
					</div>
					<div class="flex-col text-center justify-between">
						<p class="text-xl font-bold">{ m.KDA() } </p>
						<p class="text-xs">{ m.KDRatio() } </p>
						<p class="text-xs">{ m.CS() } </p>
					</div>
					<div class="flex w-40 p-2 rounded-lg flex-none">
						<div class="grid grid-flow-col grid-cols-5 grid-rows-2 justify-start gap-0.5">
							for _, item := range m.Item() {
								<div class="">
									<img src={ item } class="size-full rounded-sm object-cover"/>
								</div>
							}
						</div>
					</div>
				</div>
			</li>
		}
	</ul>
}

type TProfileCard interface {
	Name() string
	Level() string
	ProfileIcon() string

	IsRanked() bool // Determine if we have a recent rank
	Wins() string
	Losses() string
	Tier() string
	Rank() string
	LP() string
}

templ ProfileCard(props TProfileCard) {
	<div class="max-w-sm items-center flex flex-row">
		<div class="text-sm">
			<p class="">{ props.Name() } </p>
			<p>{ props.Level() } </p>
			<p>{ props.ProfileIcon() } </p>
		</div>
		<div class="">
			<div>{ props.Tier() } </div>
			<div>{ props.Losses() } </div>
			<div>{ props.Wins() } </div>
		</div>
	</div>
}

type ProfilePageProps struct {
	Profile   TProfileCard
	Matchlist []MatchCardProps
}

templ ProfilePage(props ProfilePageProps) {
	@base("Summoner Profile Page") {
		<div>
			<div>
				@ProfileCard(props.Profile)
			</div>
			<div>
				@MatchCards(props.Matchlist...)
			</div>
		</div>
	}
}
